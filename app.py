# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pYA-IxY0yto6fpmEV7TB5zovahH-oTJN
"""

##Importing the libraries
from flask import Flask, render_template, request
import numpy as np
import pandas as pd
import pickle
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from tmdbv3api import TMDb
import json 
import requests
tmdb = TMDb()
tmdb.api_key = ""

# !pip install flask-ngrok

# from flask_ngrok import run_with_ngrok

def create_similarity():
  data = pd.read_csv('editedmain_data.csv')
  cv = CountVectorizer()
  count_vectorizer_matrix = cv.fit_transform(data["comb"])
  similarity = cosine_similarity(count_vectorizer_matrix)
  return data, similarity

from tmdbv3api import Movie
tmdb_movie = Movie()
def recommend(m):
  m = m.lower()
  try:
    data.head()
    similarity.shape
  except:
    data, similarity = create_similarity()
  if m not in data["movie_title"].unique():
    return('Sorry! The movie you requested is not in our database. Please check the spelling or try with some other movies')
  else:
    i = data.loc[data["movie_title"]==m].index[0]
    lst = list(enumerate(similarity[i]))
    lst = sorted(lst, key=lambda x:x[1], reverse=True)
    lst = lst[1:9]
    full_list = []
    recommended_movie_and_posters = []
    for i in range(len(lst)):
      a = lst[i][0]
      recommended_movie_and_posters.append(data['movie_title'][a])
      result = tmdb_movie.search(data["movie_title"][a])
      poster_path = result[0].poster_path
      full_path = "https://image.tmdb.org/t/p/w500/" + poster_path
      recommended_movie_and_posters.append(full_path)
    return recommended_movie_and_posters

app = Flask(__name__)
# run_with_ngrok(app)
@app.route("/", methods=["GET"])
def home():
  return render_template("index.html")
@app.route("/predict", methods=["POST"])
def predict():
  movie = request.form['movieinput']
  rc = recommend(movie)
  if type(rc)==type('string'):
    print(rc)
    return rc
  else:
    m_str=" -- ".join(rc)
    print(m_str)
    return m_str

if __name__ == '__main__':
    app.run(debug=True)
